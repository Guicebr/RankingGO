#!/usr/bin/env python
# -*- coding: utf-8 -*-
# pylint: disable=W0613, C0116
# type: ignore[union-attr]
# This program is dedicated to the public domain under the CC0 license.

"""
Basic example for a bot that uses inline keyboards.
"""
import logging
import collections

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, bot
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from Modelo.TypeRanking import bool_to_icon

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


def start(update: Update, context: CallbackContext) -> None:
    keyboard = []
    data = {"Nick": "Wicisian", "Jogger": "11952.1", "Collector": "88725", "Backpaker": "77186", "TotalXP": "76015166" }
    vdata = {"Nick": True, "Jogger": True, "Collector": True, "Backpaker": True, "TotalXP": True}
    context.user_data["ocr_user"] = collections.OrderedDict(data)
    context.user_data["ocr_user_valid"] = collections.OrderedDict(vdata)

    ocr_user = context.user_data["ocr_user"]
    ocr_user_valid = context.user_data["ocr_user_valid"]

    txt = 'Please check the following values:'
    for i in ocr_user:
        if ocr_user[i] is not None:
            value = str(i) + ": " + str(ocr_user[i]) + bool_to_icon[int(ocr_user_valid[i])]
            cb_data = list(ocr_user.keys()).index(i)
            if cb_data == 0:
                cb_data = "nick"

            keyboard.append([InlineKeyboardButton(str(value), callback_data=cb_data)])

    keyboard.append([InlineKeyboardButton("Finish", callback_data='finish')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text('Please choose:', reply_markup=reply_markup)




def help_command(update, context) -> None:
    update.message.reply_text("Use /start to test this bot.")

def button(update, context) -> None:
    query = update.callback_query

    ocr_user_valid = context.user_data["ocr_user_valid"]
    ocr_user = context.user_data["ocr_user"]

    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    query.answer("Plomo")

    print(query.message)
    data = query.data
    if data.isnumeric():
        keyboard = query.message.reply_markup['inline_keyboard'].copy()
        #print(keyboard[int(data)][0]['text'])

        index = list(ocr_user_valid.keys())[int(data)]
        ocr_user_valid[index] = not ocr_user_valid[index]
        #TODO Traducir i
        txt = str(index) + ": " + str(ocr_user[index]) + bool_to_icon[int(ocr_user_valid[index])]
        cb_data = list(ocr_user.keys()).index(index)
        keyboard[int(data)][0] = InlineKeyboardButton(str(txt), callback_data=cb_data)
        #print(keyboard[int(data)][0]['text'])
        #print(str(query))
        query.edit_message_reply_markup(InlineKeyboardMarkup(keyboard))
    else:
        pass

    print(str(ocr_user))
    print(str(ocr_user_valid))

    query.message.reply_text(str(query.data))
    #print(query.message.reply_markup)
    #query.edit_message_text(text=f"Selected option: {query.data}")

def main():
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater("1161816070:AAH03yJ7nyZs5r-M5CtZV2XMiF78YXDYsjk", use_context=True)

    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CallbackQueryHandler(button))
    updater.dispatcher.add_handler(CommandHandler('help', help_command))


    # Start the Bot
    updater.start_polling()

    # Run the bot until the user presses Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT
    updater.idle()


if __name__ == '__main__':
    main()